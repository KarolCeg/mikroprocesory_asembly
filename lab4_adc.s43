;pin p6.1

#include "msp430.h"                     ; #define controlled include file
E       EQU BIT1
RS      EQU BIT0
DB4     EQU BIT2
DB5     EQU BIT3
DB6     EQU BIT4
DB7     EQU BIT5
DATA4   EQU 00111100b
FuncSet EQU 00001000b
DDRAMSet EQU 10000000b
        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label
        
        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP 
        mov.w   #0h, R10        ;ADC
        mov.w   #0h, R9        ;R8*160
        mov.w   #0h, R8        ;N
        
        bis.b   #BIT1, &P6SEL
        ; set up stack
        ;ADC12CTL0:
        ;A1 -> SHT0x  0011b
        ;MSC = 1
        ;REFON = 1
        ;REF2.5V =1
        ;ADC12ON = 1

        mov.w #SHT0_3 + MSC + ADC12ON + REFON + REF2_5V, &ADC12CTL0
        
        ;ADC12CTL1:
        ;SHP = 1
        ;CONSEQx = 10b
        
        mov.w #SHP + CONSEQ_2, &ADC12CTL1
        ;Wynik w ADC12MEM0
        ;ADC12MTCL0 = INCHx = 0001b -> 8bit reg
        ;          -> SREFx = 0001b
        ;          -> EOS = 1
        
        mov.b #EOS + INCH_1 + SREF_1, &ADC12MCTL0
        
        ;NA KONIEC
        ;ADC12CTL0 -> ENC = 1
        ;          -> ADC12SC = 1
       
        bis.w #ENC, &ADC12CTL0
        bis.w #ADC12SC, &ADC12CTL0
        
main:   
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        ;Top 1 sposób na dzielenie, matematycy ich nienawidza
        ; (endless loop)

        BIS.B   #0FFh, P2DIR
        BIS.B   #0FFh, P2OUT
        
        mov.w #0FFFh, R6
        mov.w   #0h, R8        ;ADC
        mov.w   #0h, R9        ;R8*160
        mov.w ADC12MEM0, R10
        
        call #init_lcd
        
        bis.b #RS, P2OUT

        mov.b #'N', R12
        call #send4bit
        mov.b #'A', R12
        call #send4bit
        mov.b #'P', R12
        call #send4bit
        mov.b #'I', R12
        call #send4bit
        mov.b #'E', R12
        call #send4bit
        mov.b #'C', R12
        call #send4bit
        mov.b #'I', R12
        call #send4bit
        mov.b #'E', R12
        call #send4bit
        mov.b #':', R12
        call #send4bit

        jmp conversion
        
init_lcd:
        call #delay40ms
        clr.b P2OUT
        mov #3, R14
rep3    bis.b #DB4+DB5+E, P2OUT
        call #delay40ms
        bic.b #E, P2OUT
        call #delay40ms
        dec R14
        jnz rep3
        mov.b #DB5+E, P2OUT
        call #delay40ms
        bic.b #E, P2OUT
        call #delay40ms
        ;;od teraz int 4bit
;function set 4bti + nr line+font
        mov.b #00101100b, R12
        call #send4bit
 ;display off     
        mov.b #00001000b, R12
        call #send4bit

; display clear        
        mov.b #E, P2OUT
        call #delay40ms
        bic.b #E, P2OUT
        call #delay40ms
        mov.b #DB4+E, P2OUT
        call #delay40ms
        bic.b #E, P2OUT
        call #delay40ms
 
   ;entry mode set    
        mov.b #110b, R12
        call #send4bit
                 ;display on+cursor on+blinking on     
        mov.b #00001111b, R12
        call #send4bit
   ;set ddram adres           
        mov.b #DDRAMSet, R12  ;ustawienie adresu 5
        call #send4bit 
        
        RET
        
send4bit:
        ;procedra przesylajaca 8 bitowa dana w trybie 4 bitowym
        ;wykorzystuje rejestry R12, R13 i R15
        ;przesylana dana w rejestrze R15
        mov.b R12, R13          ;przechowaj oryginal w R13
        bis.b #E, P2OUT         ;ustawienie E dla zbocza opadajacego
        mov.b P2OUT, R11        ;skopiowanie stanu P2 do R11
        bic.b #00111100b, R11   ;wyzerowanie pozycji na ktorych beda dane
        rrc.b R12               ;rotacje aby uzyskac starsze 4 bity
        rrc.b R12
        bic.b #11000011b, R12   ;pozostawienie starszych 4 bit reszta na zero
        bis.b R12, R11          ;skopiowanie starszych 4 bitow do przygotowane R11
        mov.b R11, P2OUT        ;odtworzenie stanu portu P2 z nowymi 4 bitami
        bic.b #E, P2OUT         ;przeslanie danych do LCD
        call #delay40us          ;opoznienie nota katalogowa
        
        mov.b R13, R12
        bis.b #E, P2OUT
        mov.b P2OUT, R11
        bic.b #00111100b, R11
        rlc.b R12
        rlc.b R12
        bic.b #11000011b, R12
        bis.b R12, R11
        mov.b R11, P2OUT
        bic.b #E, P2OUT
        call #delay40us
        RET
        
delay40ms:
        mov #10000, R15
wait40ms:   
        dec R15
        jnz wait40ms
        RET
        
delay40us:
        mov #5, R15
wait40us:   
        dec R15
        jnz wait40us
        RET
        
;///////////


conversion
        mov.w   R10, R9
        and    #0f000h, R9 
        cmp    #0h, R9
        jnz     greater
        inc     R8
        sub.w   #160, R10
        jmp conversion
        
        ;dzielenie 0 16, pierwsze dwa bajty -> cyfry
greater:
  
        ;sekwencja sprawdzajaca overflow
        bic.b #RS, P2OUT
        mov.b #DDRAMSet+10, R12
        call #send4bit
        bis.b #RS, P2OUT
        
        dec     R8
        mov.w   #0F0h, R7
        and     R8, R7
        cmp     #0h, R7
        jnz     greater20
        

        jmp delay
        
 greater20:
        mov.w #'2', R12;
        call #send4bit
        
        mov.w #'.', R12
        call #send4bit
        
        sub     #14h, R8
        add     #48, R8
        mov.w   R8, R12
        call #send4bit

 delay:
       cmp   #0h, R6
       jz main
       dec R6
       jmp delay
        
        END
