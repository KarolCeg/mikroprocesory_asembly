#include "msp430.h"                     ; #define controlled include file
E       EQU BIT1
RS      EQU BIT0
DB4     EQU BIT2
DB5     EQU BIT3
DB6     EQU BIT4
DB7     EQU BIT5
DATA4   EQU 00111100b
FuncSet EQU 00001000b
DDRAMSet EQU 10000000b

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        ORG     0FFECh			;TimerA interrupt
        DC16    TIMER_A1_Interrupt
        
        ORG     0FFE8h
        DC16    Butt_Interrupt

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        ;Wlaczenie przerwan
        bis.w   #GIE, SR
        
        ;PIN1 interrupt 0100
        bis.b   #08h, P1IE            
        bis.b   #08h, P1IES
        
        ;Rejestry
        mov.w   #01h, R6                ;Pomocniczy do trybu 
        mov.w   #0h,  R7                ;Czas
        mov.w   #0h,  R8                ;Pozostala liczba do dzielenia
        mov.w   #0h,  R9                ;Wynik dzielenia
        mov.w   #0h,  R10               ;Rejestr pomocniczy
        mov.w   #0h,  R14               ;Dzielnik
        ;PIN4
        ;bis.b   #01h, P4IE
        ;bis.b   #01h, P4IES
        
        ;Zegar
        mov.w   #780, &TACCR0             ; 
        mov.w   #CCIE,&TACCTL0            ; Enable interrupts on Compare 0

        BIS.w   #MC0| ID_0|TASSEL_2|TACLR,&TACTL
        mov.w   #OUTMOD_2, &TACCTL1
        
        
        
        ;DAC - test timera
        mov.w   #REFON + REF2_5V, &ADC12CTL0
        ;PIN6.7
        bis.b   #10000000b, P6SEL
        bis.b   #10000000b, P6DIR
        
        ;DAC12_1
        mov.w   #DAC12IR + DAC12AMP_5 + DAC12ENC, &DAC12_1CTL
        mov.w   #0FFFh, &DAC12_1DAT
        mov.w   #0FFFh, &DAC12_1DAT
        
        
        ;LCD init
        BIS.B   #0FFh, P2DIR
        BIS.B   #0FFh, P2OUT
        call #init_lcd
        
        bis.b #RS, P2OUT

        mov.b #'C', R12
        call #send4bit
        mov.b #'Z', R12
        call #send4bit
        mov.b #'A', R12
        call #send4bit
        mov.b #'S', R12
        call #send4bit
        mov.b #':', R12
        call #send4bit
        
        bic.b #RS, P2OUT
        mov.b #DDRAMSet+40h, R12
        call #send4bit
        bis.b #RS, P2OUT
        
        mov.b #'A', R12
        call #send4bit
        mov.b #'R', R12
        call #send4bit
        mov.b #'T', R12
        call #send4bit
        mov.b #'U', R12
        call #send4bit
        mov.b #'R', R12
        call #send4bit
        mov.b #' ', R12
        call #send4bit
        mov.b #'G', R12
        call #send4bit
        mov.b #'A', R12
        call #send4bit
        mov.b #'B', R12
        call #send4bit
        mov.b #'I', R12
        call #send4bit

main:
       cmp #0h, R6
       jz   do_nothing
       mov.w    R7, R8
       
       bic.b #RS, P2OUT
       mov.b #DDRAMSet+8h, R12
       call #send4bit
       bis.b #RS, P2OUT
       
       mov.w    R8, R10
       mov.w    #10000, R14
       call     #division
       
       mov.w    R9, R12
       call     #send4bit
       mov.w    #0h, R9
       
       mov.w    R8, R10
       mov.w    #1000, R14
       call     #division
       
       mov.w    R9, R12
       call     #send4bit
       mov.w    #0h, R9
       
       mov.w    #'.', R12
       call     #send4bit
       
       mov.w    R8, R10
       mov.w    #100, R14
       call     #division
       
       mov.w    R9, R12
       call     #send4bit
       mov.w    #0h, R9
       
        mov.w    R8, R10
       mov.w    #10, R14
       call     #division
       
       mov.w    R9, R12
       call     #send4bit
       mov.w    #0h, R9
       
       add      #48, R8
       mov.w    R8, R12
       call     #send4bit
       mov.w    #0h, R9
       
       mov.w    #'s', R12
       call     #send4bit
       
       jmp main

division:
       sub.w R14, R10
       bit   #0C000h, R10
       jz    increment
       add   #48, R9
       RET      

increment:
      inc       R9
      sub       R14, R8
      jmp division

do_nothing:
       jmp main
       
TIMER_A1_Interrupt:
       xor      #0FFFh, DAC12_1DAT
       cmp      #0h, R6
       jnz      ignore
       inc      R7
       cmp      #10000, R7
       jz       overflow
       RETI

overflow:
      mov.w     #0h, R7
      RETI

ignore:
      RETI

Butt_Interrupt:
      bic.b     #08h, P1IFG
      bit.b     #01h,  P4IN
      jnz       Error
      xor       #01h, R6
      cmp       #0h,  R6
      jz        reset_count
      RETI

reset_count:
      mov.w     #0h, R7
      RETI

Error:
    RETI

;///////////LCD//////////////////////////////////
init_lcd:
        call #delay40ms
        clr.b P2OUT
        mov #3, R14
rep3    bis.b #DB4+DB5+E, P2OUT
        call #delay40ms
        bic.b #E, P2OUT
        call #delay40ms
        dec R14
        jnz rep3
        mov.b #DB5+E, P2OUT
        call #delay40ms
        bic.b #E, P2OUT
        call #delay40ms
        ;;od teraz int 4bit
;function set 4bti + nr line+font
        mov.b #00101100b, R12
        call #send4bit
 ;display off     
        mov.b #00001000b, R12
        call #send4bit

; display clear        
        mov.b #E, P2OUT
        call #delay40ms
        bic.b #E, P2OUT
        call #delay40ms
        mov.b #DB4+E, P2OUT
        call #delay40ms
        bic.b #E, P2OUT
        call #delay40ms
 
   ;entry mode set    
        mov.b #110b, R12
        call #send4bit
                 ;display on+cursor on+blinking on     
        mov.b #00001111b, R12
        call #send4bit
   ;set ddram adres           
        mov.b #DDRAMSet, R12  ;ustawienie adresu 5
        call #send4bit 
        
        RET
        
send4bit:
        ;procedra przesylajaca 8 bitowa dana w trybie 4 bitowym
        ;wykorzystuje rejestry R12, R13 i R15
        ;przesylana dana w rejestrze R15
        mov.b R12, R13          ;przechowaj oryginal w R13
        bis.b #E, P2OUT         ;ustawienie E dla zbocza opadajacego
        mov.b P2OUT, R11        ;skopiowanie stanu P2 do R11
        bic.b #00111100b, R11   ;wyzerowanie pozycji na ktorych beda dane
        rrc.b R12               ;rotacje aby uzyskac starsze 4 bity
        rrc.b R12
        bic.b #11000011b, R12   ;pozostawienie starszych 4 bit reszta na zero
        bis.b R12, R11          ;skopiowanie starszych 4 bitow do przygotowane R11
        mov.b R11, P2OUT        ;odtworzenie stanu portu P2 z nowymi 4 bitami
        bic.b #E, P2OUT         ;przeslanie danych do LCD
        call #delay40us          ;opoznienie nota katalogowa
        
        mov.b R13, R12
        bis.b #E, P2OUT
        mov.b P2OUT, R11
        bic.b #00111100b, R11
        rlc.b R12
        rlc.b R12
        bic.b #11000011b, R12
        bis.b R12, R11
        mov.b R11, P2OUT
        bic.b #E, P2OUT
        call #delay40us
        RET
        
delay40ms:
        mov #10000, R15
wait40ms:   
        dec R15
        jnz wait40ms
        RET
        
delay40us:
        mov #5, R15
wait40us:   
        dec R15
        jnz wait40us
        RET


END
